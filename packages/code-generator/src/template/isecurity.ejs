<%
function toParameters(t,s){
  let ty = (t||'').toLowerCase();
  let sc = (s||'').toLowerCase();
  if(ty==='apikey')
    return '{ apiKey }: IApiKeyParameters';
  if(ty==='http'){
    if(sc==='basic')
      return '{ userId, password }: IHttpBasicParameters';
    if(sc==='bearer')
      return '{ token, format }: IHttpBearerParameters';
    return '{ schema, requirement }: IHttpParameters';
  }
  if(ty==='oauth2')
    return '{ flows, scopes }: IOauth2Parameters';
  if(ty==='openidconnect')
    return '{ openIdConnectUrl, scopes }: IOpenIdConnectParameters';
  return '{ schema, requirement, parameters }: ISecurityParameters';
}
-%>
import {
  IContext,
  errorMessage, SecurityError,
  ISecurityAction, IApiKeyParameters, IHttpBasicParameters, IHttpBearerParameters, IHttpParameters, IOauth2Parameters, IOpenIdConnectParameters, ISecurityParameters
} from '@typeapi/api-router';

export interface ISecurity {
<% Object.keys(model).forEach(name=>{ let security=model[name]; -%>
  /**
   * <%- security.description || name %>
   * @type <%- security.type %>
   */
  <%- name %>(<%- toParameters(security.type,security.scheme) %>, context: IContext): Promise<boolean | errorMessage | SecurityError>;
<% }); -%>
}